#!/bin/bash

if [[ $EUID -ne 0 ]];
then
    exec pkexec --disable-internal-agent "$0" "$@"
fi

source /etc/holoiso-release
argdata=/tmp/steamos-update-temparg
ready_watcher=/tmp/steamos-ready-to-deploy

branchpath=/etc/holoiso-branch

if [[ -f "${branchpath}" ]]; then
    UPD_BRANCH=$(cat ${branchpath})
else
    UPD_BRANCH=${RELEASETYPE}
fi

downloadendpoint=https://cd2.holoiso.ru.eu.org/holoiso-images
preferred_imgtype=".img.zst"
endpoint=https://cd2.holoiso.ru.eu.org/holoiso-images/latest_${UPD_BRANCH}.releasemeta
downloadpath=/home/.steamos/updatecontainer

clean_progress() {
	local scale=$1
	local postfix=$2
	local last_value=$scale
	while IFS= read -r line; do
		value=$(( ${line}*${scale}/100 ))
		if [ "$last_value" != "$value" ]; then
			echo ${value}${postfix}
			last_value=$value
		fi
	done
}

updatecheck(){
    curl -s "${endpoint}" > ${argdata}
    source ${argdata}
    if [[ "${IMAGEFILE}" == "${IMAGE_ID}" ]]; then
        echo "System up to date."
    elif [[ ! -s "${argdata}" ]]; then
        echo "Empty arguments file. Connect to internet or update your OS manually."
        exit 7
    elif [[ "${IMAGEFILE}" > "${IMAGE_ID}" ]]; then
        echo "Update available. OS Update: ${IMAGEFILE}"
    elif [[ "${IMAGEFILE}" < "${IMAGE_ID}" ]]; then
        echo -e "Your version (${IMAGE_ID}) is newer than currently available (${IMAGEFILE}).\nPlease wait for next update to appear available in branch \"${UPD_BRANCH}\" for installation."
        exit 7
    fi
}

verintg(){
    echo "Verifying update file integrity..."
    CURR_SHA=$(echo $(sha256sum ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}.img.zst) | awk '{print $1}')
    if [[ "${CURR_SHA}" == "$(cat ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}.sha256)" ]]; then
        touch ${ready_watcher}
        echo "Update file download complete. The system is ready to update."
    else
        rm -rf ${downloadpath}/${IMAGEFILE}
        echo "Verification failed. Download contents erased."
        exit 1
    fi
}

dlupd(){
    source ${argdata}
    if [[ -f "${downloadpath}/${IMAGEFILE}/${IMAGEFILE}.img.zst" ]] && [[ -f "${downloadpath}/${IMAGEFILE}/${IMAGEFILE}.sha256" ]]; then
        verintg
    else
        mkdir -p "${downloadpath}/${IMAGEFILE}"
        curl --http1.1 -# -L -o ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}.img.zst  -C - "${downloadendpoint}/${IMAGEFILE}${preferred_imgtype}" 2>&1 | stdbuf -oL tr '\r' '\n' | grep --line-buffered -oP '[0-9]*+(?=.[0-9])' | clean_progress 100 %
        curl --http1.1 -# -L -o ${downloadpath}/${IMAGEFILE}/${IMAGEFILE}.sha256  -C - "${downloadendpoint}/${IMAGEFILE}.sha256"
    fi
        verintg
}


applyupdate(){
    dlupd
    steamos-update-os ${argdata}
}

if [ -n "$1" ]; then
    case "$1" in
    "check")
        rm -f ${argdata} ${ready_watcher}
	    updatecheck
        ;;
    "--beta")
        echo "Steam Client stub"
        exit 0
        ;;
    "--enable-duplicate-detection") 
        echo "Steam Client stub"
        exit 0 
        ;;
    "--supports-duplicate-detection")
        echo "This script supports the duplicate detection option"
        exit 0
    ;;
    esac
    shift
else
    if [[ -f "${argdata}" ]]; then
        applyupdate
    else
        echo "Unknown option"
    fi
fi